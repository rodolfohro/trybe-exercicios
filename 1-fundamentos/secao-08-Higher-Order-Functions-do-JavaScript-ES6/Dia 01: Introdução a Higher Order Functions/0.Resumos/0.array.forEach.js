//addEventListerner recebe a fun√ß√£o registerUser como par√¢metro, deixando o c√≥digo mais organizado.
const button = document.querySelector('#signup-button');

const registerUser = () => {
  console.log('Registrado com sucesso!');
};

button.addEventListener('click', registerUser);

/* forEach: executa uma a√ß√£o determinada por voc√™ para cada item do array e n√£o possui retorno;
find: encontra o primeiro elemento que satisfa√ßa alguma condi√ß√£o;
some: retorna true se algum elemento satisfaz alguma condi√ß√£o, caso contr√°rio retorna false;
every: retorna true se todos os elementos corresponderem a uma condi√ß√£o, caso contr√°rio retorna false. */

//Anota a√≠ üìù: uma fun√ß√£o callback √© uma fun√ß√£o passada por par√¢metro ou executada dentro de outra fun√ß√£o. Ela √© executada ap√≥s o t√©rmino de uma a√ß√£o ass√≠ncrona, como uma requisi√ß√£o a uma API.

// estrutura de uma HOF
array.hofASerExecutada((elementoAtual, index, arrayOriginal) => {});

// Exemplo 1: forEach - executa uma a√ß√£o para cada elemento do array  e n√£o possui retorno
array.forEach((element, index) => {
  // c√≥digo a ser executado
});
// Exemplo
const arrayOfValues = ['jos√©', 50, 0.25, { comida: 'Chocolate' }];

arrayOfValues.forEach((element, index) => {
  console.log(`O elemento atual √©: ${element} e possui o index: ${index}`);
});

/* O c√≥digo acima est√° organizado da seguinte maneira:

arrayOfValues: nome do array que ser√° percorrido;
.forEach: a HOF usada. Poderia ser outra HOF, como .find, .some, .every, entre outras, que a estrutura seria a mesma;
element: valor do elemento do array;
(element, index) => {  *c√≥digo * }: fun√ß√£o a ser executada. */


// Colocar todos os nomes em letras mai√∫sculas usando o metodo for

const pessoasAprovadas = ['Ana Beatriz', 'Caio Nunes', 'Afonso Ribeiro', 'Leonardo Lins']; // lista de nomes

for(let index = 0; index < pessoasAprovadas.length; index += 1) {
  pessoasAprovadas[index] = pessoasAprovadas[index].toUpperCase(); // acessa cada nome e transforma em mai√∫sculo
}

console.log(pessoasAprovadas); // ['ANA BEATRIZ', 'CAIO NUNES', 'AFONSO RIBEIRO', 'LEONARDO LINS']

// Colocar todos os nomes em letras mai√∫sculas usando o metodo map

const approvedPeople= ['Ana Beatriz', 'Caio Nunes', 'Afonso Ribeiro', 'Leonardo Lins']; // lista de nomes

approvedPeople.forEach((name, i) => {
  approvedPeople[i] = approvedPeople[i].toUpperCase(); // acessa cada elemento do array e atualiza para letra mai√∫scula
});

console.log(approvedPeople); // ['ANA BEATRIZ', 'CAIO NUNES', 'AFONSO RIBEIRO', 'LEONARDO LINS']

// Fun√ß√£o tabuada de 2 utilizando o metodo forEach
const numeros = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

numeros.forEach((element) => {
  console.log(element * 2); // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
});

// Voc√™ tamb√©m pode separar a callback do forEach em uma outra fun√ß√£o. Veja o exemplo abaixo:

const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

const multiply = (element) => {
  console.log(element * 2);
}

numbers.forEach(multiply);


// Ultimo Exemplo utilisando TUDO do for foreach
const listaDePessoasAprovadas = [
  'roberta@email.com',
  'paulo@email.com',
  'anaroberta@email.com',
  'fabiano@email.com',
];

const enviarEmail = (email) => {
  console.log(`O email ${email} foi enviado com sucesso`);
}

listaDePessoasAprovadas.forEach((item, posicao, array) =>{
  enviarEmail(item);
  console.log(`Sua posi√ß√£o √© a de: ${posicao}`);
  console.log(`A quantidade de pessoas no processo seletivo √© de ${array.length}`)
});
